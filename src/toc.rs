use std::fmt;
use subchannel::{QData, Q};
use {Bcd, CdError, CdResult, Msf, Sector, SessionFormat, Track, TrackFormat};

/// Table of contents
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Clone, PartialEq, Eq)]
pub struct Toc {
    /// Track list
    tracks: Vec<Track>,
}

impl Toc {
    pub(crate) fn new(tracks: Vec<Track>) -> CdResult<Toc> {
        if tracks.is_empty() {
            Err(CdError::EmptyToc)
        } else {
            Ok(Toc { tracks })
        }
    }

    /// Return the Track description for the given `track_no`. Returns an error if `track_no` is 0
    /// or greater than the total number of tracks.
    pub fn track(&self, track_no: Bcd) -> CdResult<&Track> {
        let t = track_no.binary();

        if t < 1 {
            return Err(CdError::BadTrack);
        }

        self.tracks.get((t - 1) as usize).ok_or(CdError::BadTrack)
    }

    /// Return the full track list
    pub fn tracks(&self) -> &[Track] {
        &self.tracks
    }

    /// Generate a lead-in ToC sector for the given `index`.
    pub fn build_toc_sector(&self, lead_in_msf: Msf) -> CdResult<Sector> {
        let index = (Msf::MAX - lead_in_msf).sector_index();

        // Number of entries in the raw ToC: one per track + first track + last track + lead-in
        let ntracks = self.tracks.len() as u32;
        let nentries = ntracks + 3;

        // We divide by 3 because each entry is usually repeated 3 times in a row
        let entry_off = nentries - ((index / 3) % nentries) - 1;

        let (q, fmt) = match entry_off {
            0 => {
                let t = &self.tracks[0];

                let qdata = QData::Mode1TocFirstTrack {
                    first_track: t.track,
                    session_format: self.session_format(),
                    lead_in_msf,
                };

                (Q::from_qdata_mode1(qdata, t.control), t.format)
            }
            1 => {
                let t = self.tracks.last().unwrap();

                let qdata = QData::Mode1TocLastTrack {
                    last_track: t.track,
                    lead_in_msf,
                };

                (Q::from_qdata_mode1(qdata, t.control), t.format)
            }
            2 => {
                // I'm not sure what the format of these sectors should be but in practice it seems
                // to be the same type as the last sector.
                let t = self.tracks.last().unwrap();

                let qdata = QData::Mode1TocLeadOut {
                    lead_out_start: self.lead_out_start(),
                    lead_in_msf,
                };

                (Q::from_qdata_mode1(qdata, t.control), t.format)
            }
            n => {
                let t = &self.tracks[(n - 3) as usize];

                let qdata = QData::Mode1Toc {
                    track: t.track,
                    index1_msf: t.start,
                    lead_in_msf,
                };

                (Q::from_qdata_mode1(qdata, t.control), t.format)
            }
        };

        Sector::empty(q, fmt)
    }

    /// Generate a lead-out sector for the given position. Returns an error if position is before
    /// the start of the lead-out.
    ///
    /// Note that this function will keep generating a lead-out as far as 99:59:74 even though in
    /// practice it doesn't make a lot of sense and on a real disc we'd long be out of bounds. On
    /// the other hand there doesn't seem to be a very obvious reasonable choice for how long the
    /// lead-out should be allowed to be since it'll vary depending on a vast number of factors and
    /// the various CD image formats don't typically store this information anyway.
    pub fn build_lead_out_sector(&self, disc_msf: Msf) -> CdResult<Sector> {
        let los = self.lead_out_start();

        if disc_msf < los {
            return Err(CdError::InvalidLeadOutPosition);
        }

        let lead_out_msf = disc_msf - los;

        // The green book says that:
        //
        //   If the last track in the program area of the disc is an audio track, then it is
        //   recommended that the lead-out area is encoded as an audio track. If the last track in
        //   the program area of the disc is a CD-I track, then it is recommended that the lead-out
        //   area is encoded as Mode 2 Form 2.
        //
        // I generalize the concept here by always setting the format of the lead-out to the format
        // of the last track.
        let t = self.tracks.last().unwrap();

        let qdata = QData::Mode1LeadOut {
            lead_out_msf,
            disc_msf,
        };

        let q = Q::from_qdata_mode1(qdata, t.control);

        Sector::empty(q, t.format)
    }

    /// Returns the MSF of the first sector in the lead-out
    pub fn lead_out_start(&self) -> Msf {
        let t = self.tracks.last().unwrap();

        t.start + t.length
    }

    /// Return the session format for this ToC based on the format of its tracks
    pub fn session_format(&self) -> SessionFormat {
        for t in self.tracks.iter() {
            match t.format {
                TrackFormat::Audio => (),
                TrackFormat::Mode1 => return SessionFormat::CdDaCdRom,
                TrackFormat::Mode2Xa => return SessionFormat::CdXa,
                TrackFormat::Mode2CdI => return SessionFormat::Cdi,
            }
        }

        // No "special" track found, it's probably a conventional CD
        SessionFormat::CdDaCdRom
    }
}

impl fmt::Debug for Toc {
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
        writeln!(
            fmt,
            "ToC: {} track{}, total length {}",
            self.tracks.len(),
            if self.tracks.len() == 1 { "" } else { "s" },
            self.lead_out_start()
        )?;

        for t in self.tracks.iter() {
            writeln!(
                fmt,
                " - Track {}: start {} length {} {:?}",
                t.track, t.start, t.length, t.format,
            )?;
        }

        Ok(())
    }
}

#[cfg(test)]
fn ridgeracer_toc() -> Toc {
    let tracks = [
        ("00:02:00", "01:02:51", TrackFormat::Mode2Xa),
        ("01:06:51", "00:07:12", TrackFormat::Audio),
        ("01:15:63", "01:41:01", TrackFormat::Audio),
        ("02:58:64", "02:15:00", TrackFormat::Audio),
        ("05:15:64", "05:00:01", TrackFormat::Audio),
        ("10:17:65", "05:00:01", TrackFormat::Audio),
        ("15:19:66", "05:00:01", TrackFormat::Audio),
        ("20:21:67", "05:00:01", TrackFormat::Audio),
        ("25:23:68", "05:00:01", TrackFormat::Audio),
        ("30:25:69", "04:41:42", TrackFormat::Audio),
        ("35:09:36", "05:00:01", TrackFormat::Audio),
        ("40:11:37", "05:00:01", TrackFormat::Audio),
        ("45:13:38", "05:00:01", TrackFormat::Audio),
        ("50:15:39", "05:00:01", TrackFormat::Audio),
        ("55:17:40", "05:00:01", TrackFormat::Audio),
        ("60:19:41", "00:15:01", TrackFormat::Audio),
        ("60:36:42", "00:58:38", TrackFormat::Audio),
        ("61:37:05", "01:55:17", TrackFormat::Audio),
        ("63:34:22", "03:06:27", TrackFormat::Audio),
        ("66:42:49", "03:06:25", TrackFormat::Audio),
    ];

    let tracks: Vec<Track> = tracks
        .iter()
        .enumerate()
        .map(|(i, &(start, length, format))| {
            let track = Bcd::from_binary((i + 1) as u8).unwrap();
            let start = start.parse().unwrap();
            let length = length.parse().unwrap();

            let mut control = if format.is_audio() {
                ::subchannel::AdrControl::AUDIO
            } else {
                ::subchannel::AdrControl::DATA
            };

            Track {
                track,
                format,
                start,
                length,
                control,
            }
        })
        .collect();

    Toc::new(tracks).unwrap()
}

#[test]
fn lead_out_generation() {
    let toc = ridgeracer_toc();
    let expected: &[[u8; 12]] = &[
        [
            0x01, 0xaa, 0x01, 0x00, 0x00, 0x00, 0x00, 0x69, 0x48, 0x74, 0x9f, 0x33,
        ],
        [
            0x01, 0xaa, 0x01, 0x00, 0x00, 0x01, 0x00, 0x69, 0x49, 0x00, 0x38, 0x40,
        ],
        [
            0x01, 0xaa, 0x01, 0x00, 0x00, 0x02, 0x00, 0x69, 0x49, 0x01, 0xc6, 0xb3,
        ],
        [
            0x01, 0xaa, 0x01, 0x00, 0x00, 0x03, 0x00, 0x69, 0x49, 0x02, 0x5c, 0x81,
        ],
    ];

    let mut msf = toc.lead_out_start();

    for exp in expected.iter() {
        let s = toc.build_lead_out_sector(msf).unwrap();

        let raw = s.q().to_raw();

        print!("{} [", msf);
        for &b in raw.iter() {
            print!("0x{:02x},", b);
        }
        println!("],");

        // Make sure that we convert back to the same thing
        let q = Q::from_raw(raw).unwrap();
        assert_eq!(q, s.q().clone());

        assert_eq!(raw, *exp);

        msf = msf.next().unwrap();
    }
}

#[test]
fn lead_in_generation() {
    use DiscPosition;
    let toc = ridgeracer_toc();

    let expected: &[[u8; 12]] = &[
        [
            0x01, 0x00, 0x17, 0x99, 0x58, 0x70, 0x00, 0x60, 0x36, 0x42, 0xe1, 0xd6,
        ],
        [
            0x01, 0x00, 0x17, 0x99, 0x58, 0x71, 0x00, 0x60, 0x36, 0x42, 0x4b, 0x87,
        ],
        [
            0x01, 0x00, 0x18, 0x99, 0x58, 0x72, 0x00, 0x61, 0x37, 0x05, 0x40, 0xb5,
        ],
        [
            0x01, 0x00, 0x18, 0x99, 0x58, 0x73, 0x00, 0x61, 0x37, 0x05, 0xea, 0xe4,
        ],
        [
            0x01, 0x00, 0x18, 0x99, 0x58, 0x74, 0x00, 0x61, 0x37, 0x05, 0x8d, 0x30,
        ],
        [
            0x01, 0x00, 0x19, 0x99, 0x59, 0x00, 0x00, 0x63, 0x34, 0x22, 0x74, 0x75,
        ],
        [
            0x01, 0x00, 0x19, 0x99, 0x59, 0x01, 0x00, 0x63, 0x34, 0x22, 0xde, 0x24,
        ],
        [
            0x01, 0x00, 0x19, 0x99, 0x59, 0x02, 0x00, 0x63, 0x34, 0x22, 0x30, 0xf6,
        ],
        [
            0x01, 0x00, 0x20, 0x99, 0x59, 0x03, 0x00, 0x66, 0x42, 0x49, 0x11, 0xb0,
        ],
        [
            0x01, 0x00, 0x20, 0x99, 0x59, 0x04, 0x00, 0x66, 0x42, 0x49, 0x76, 0x64,
        ],
        [
            0x01, 0x00, 0x20, 0x99, 0x59, 0x05, 0x00, 0x66, 0x42, 0x49, 0xdc, 0x35,
        ],
        [
            0x41, 0x00, 0xa0, 0x99, 0x59, 0x06, 0x00, 0x01, 0x20, 0x00, 0x17, 0x22,
        ],
        [
            0x41, 0x00, 0xa0, 0x99, 0x59, 0x07, 0x00, 0x01, 0x20, 0x00, 0xbd, 0x73,
        ],
        [
            0x41, 0x00, 0xa0, 0x99, 0x59, 0x08, 0x00, 0x01, 0x20, 0x00, 0xd8, 0x8a,
        ],
        [
            0x01, 0x00, 0xa1, 0x99, 0x59, 0x09, 0x00, 0x20, 0x00, 0x00, 0xf0, 0x02,
        ],
        [
            0x01, 0x00, 0xa1, 0x99, 0x59, 0x10, 0x00, 0x20, 0x00, 0x00, 0x5c, 0x24,
        ],
        [
            0x01, 0x00, 0xa1, 0x99, 0x59, 0x11, 0x00, 0x20, 0x00, 0x00, 0xf6, 0x75,
        ],
        [
            0x01, 0x00, 0xa2, 0x99, 0x59, 0x12, 0x00, 0x69, 0x48, 0x74, 0xe9, 0x98,
        ],
        [
            0x01, 0x00, 0xa2, 0x99, 0x59, 0x13, 0x00, 0x69, 0x48, 0x74, 0x43, 0xc9,
        ],
        [
            0x01, 0x00, 0xa2, 0x99, 0x59, 0x14, 0x00, 0x69, 0x48, 0x74, 0x24, 0x1d,
        ],
        [
            0x41, 0x00, 0x01, 0x99, 0x59, 0x15, 0x00, 0x00, 0x02, 0x00, 0x6b, 0x24,
        ],
        [
            0x41, 0x00, 0x01, 0x99, 0x59, 0x16, 0x00, 0x00, 0x02, 0x00, 0x85, 0xf6,
        ],
        [
            0x41, 0x00, 0x01, 0x99, 0x59, 0x17, 0x00, 0x00, 0x02, 0x00, 0x2f, 0xa7,
        ],
        [
            0x01, 0x00, 0x02, 0x99, 0x59, 0x18, 0x00, 0x01, 0x06, 0x51, 0x41, 0x11,
        ],
        [
            0x01, 0x00, 0x02, 0x99, 0x59, 0x19, 0x00, 0x01, 0x06, 0x51, 0xeb, 0x40,
        ],
        [
            0x01, 0x00, 0x02, 0x99, 0x59, 0x20, 0x00, 0x01, 0x06, 0x51, 0x4f, 0xd2,
        ],
        [
            0x01, 0x00, 0x03, 0x99, 0x59, 0x21, 0x00, 0x01, 0x15, 0x63, 0xe2, 0x61,
        ],
        [
            0x01, 0x00, 0x03, 0x99, 0x59, 0x22, 0x00, 0x01, 0x15, 0x63, 0x0c, 0xb3,
        ],
        [
            0x01, 0x00, 0x03, 0x99, 0x59, 0x23, 0x00, 0x01, 0x15, 0x63, 0xa6, 0xe2,
        ],
        [
            0x01, 0x00, 0x04, 0x99, 0x59, 0x24, 0x00, 0x02, 0x58, 0x64, 0x54, 0x09,
        ],
        [
            0x01, 0x00, 0x04, 0x99, 0x59, 0x25, 0x00, 0x02, 0x58, 0x64, 0xfe, 0x58,
        ],
        [
            0x01, 0x00, 0x04, 0x99, 0x59, 0x26, 0x00, 0x02, 0x58, 0x64, 0x10, 0x8a,
        ],
        [
            0x01, 0x00, 0x05, 0x99, 0x59, 0x27, 0x00, 0x05, 0x15, 0x64, 0x03, 0x08,
        ],
        [
            0x01, 0x00, 0x05, 0x99, 0x59, 0x28, 0x00, 0x05, 0x15, 0x64, 0x66, 0xf1,
        ],
        [
            0x01, 0x00, 0x05, 0x99, 0x59, 0x29, 0x00, 0x05, 0x15, 0x64, 0xcc, 0xa0,
        ],
        [
            0x01, 0x00, 0x06, 0x99, 0x59, 0x30, 0x00, 0x10, 0x17, 0x65, 0x76, 0x23,
        ],
        [
            0x01, 0x00, 0x06, 0x99, 0x59, 0x31, 0x00, 0x10, 0x17, 0x65, 0xdc, 0x72,
        ],
        [
            0x01, 0x00, 0x06, 0x99, 0x59, 0x32, 0x00, 0x10, 0x17, 0x65, 0x32, 0xa0,
        ],
        [
            0x01, 0x00, 0x07, 0x99, 0x59, 0x33, 0x00, 0x15, 0x19, 0x66, 0x27, 0xbe,
        ],
        [
            0x01, 0x00, 0x07, 0x99, 0x59, 0x34, 0x00, 0x15, 0x19, 0x66, 0x40, 0x6a,
        ],
        [
            0x01, 0x00, 0x07, 0x99, 0x59, 0x35, 0x00, 0x15, 0x19, 0x66, 0xea, 0x3b,
        ],
        [
            0x01, 0x00, 0x08, 0x99, 0x59, 0x36, 0x00, 0x20, 0x21, 0x67, 0x6f, 0x63,
        ],
        [
            0x01, 0x00, 0x08, 0x99, 0x59, 0x37, 0x00, 0x20, 0x21, 0x67, 0xc5, 0x32,
        ],
        [
            0x01, 0x00, 0x08, 0x99, 0x59, 0x38, 0x00, 0x20, 0x21, 0x67, 0xa0, 0xcb,
        ],
        [
            0x01, 0x00, 0x09, 0x99, 0x59, 0x39, 0x00, 0x25, 0x23, 0x68, 0x31, 0x34,
        ],
        [
            0x01, 0x00, 0x09, 0x99, 0x59, 0x40, 0x00, 0x25, 0x23, 0x68, 0x84, 0xce,
        ],
        [
            0x01, 0x00, 0x09, 0x99, 0x59, 0x41, 0x00, 0x25, 0x23, 0x68, 0x2e, 0x9f,
        ],
        [
            0x01, 0x00, 0x10, 0x99, 0x59, 0x42, 0x00, 0x30, 0x25, 0x69, 0xb6, 0xe4,
        ],
        [
            0x01, 0x00, 0x10, 0x99, 0x59, 0x43, 0x00, 0x30, 0x25, 0x69, 0x1c, 0xb5,
        ],
        [
            0x01, 0x00, 0x10, 0x99, 0x59, 0x44, 0x00, 0x30, 0x25, 0x69, 0x7b, 0x61,
        ],
        [
            0x01, 0x00, 0x11, 0x99, 0x59, 0x45, 0x00, 0x35, 0x09, 0x36, 0x95, 0x82,
        ],
        [
            0x01, 0x00, 0x11, 0x99, 0x59, 0x46, 0x00, 0x35, 0x09, 0x36, 0x7b, 0x50,
        ],
        [
            0x01, 0x00, 0x11, 0x99, 0x59, 0x47, 0x00, 0x35, 0x09, 0x36, 0xd1, 0x01,
        ],
        [
            0x01, 0x00, 0x12, 0x99, 0x59, 0x48, 0x00, 0x40, 0x11, 0x37, 0xd5, 0x8e,
        ],
        [
            0x01, 0x00, 0x12, 0x99, 0x59, 0x49, 0x00, 0x40, 0x11, 0x37, 0x7f, 0xdf,
        ],
        [
            0x01, 0x00, 0x12, 0x99, 0x59, 0x50, 0x00, 0x40, 0x11, 0x37, 0xd3, 0xf9,
        ],
        [
            0x01, 0x00, 0x13, 0x99, 0x59, 0x51, 0x00, 0x45, 0x13, 0x38, 0x42, 0x06,
        ],
        [
            0x01, 0x00, 0x13, 0x99, 0x59, 0x52, 0x00, 0x45, 0x13, 0x38, 0xac, 0xd4,
        ],
        [
            0x01, 0x00, 0x13, 0x99, 0x59, 0x53, 0x00, 0x45, 0x13, 0x38, 0x06, 0x85,
        ],
        [
            0x01, 0x00, 0x14, 0x99, 0x59, 0x54, 0x00, 0x50, 0x15, 0x39, 0xb4, 0x5d,
        ],
        [
            0x01, 0x00, 0x14, 0x99, 0x59, 0x55, 0x00, 0x50, 0x15, 0x39, 0x1e, 0x0c,
        ],
        [
            0x01, 0x00, 0x14, 0x99, 0x59, 0x56, 0x00, 0x50, 0x15, 0x39, 0xf0, 0xde,
        ],
        [
            0x01, 0x00, 0x15, 0x99, 0x59, 0x57, 0x00, 0x55, 0x17, 0x40, 0x7f, 0x70,
        ],
        [
            0x01, 0x00, 0x15, 0x99, 0x59, 0x58, 0x00, 0x55, 0x17, 0x40, 0x1a, 0x89,
        ],
        [
            0x01, 0x00, 0x15, 0x99, 0x59, 0x59, 0x00, 0x55, 0x17, 0x40, 0xb0, 0xd8,
        ],
        [
            0x01, 0x00, 0x16, 0x99, 0x59, 0x60, 0x00, 0x60, 0x19, 0x41, 0xc1, 0x44,
        ],
        [
            0x01, 0x00, 0x16, 0x99, 0x59, 0x61, 0x00, 0x60, 0x19, 0x41, 0x6b, 0x15,
        ],
        [
            0x01, 0x00, 0x16, 0x99, 0x59, 0x62, 0x00, 0x60, 0x19, 0x41, 0x85, 0xc7,
        ],
        [
            0x01, 0x00, 0x17, 0x99, 0x59, 0x63, 0x00, 0x60, 0x36, 0x42, 0x4e, 0xfe,
        ],
        [
            0x01, 0x00, 0x17, 0x99, 0x59, 0x64, 0x00, 0x60, 0x36, 0x42, 0x29, 0x2a,
        ],
        [
            0x01, 0x00, 0x17, 0x99, 0x59, 0x65, 0x00, 0x60, 0x36, 0x42, 0x83, 0x7b,
        ],
        [
            0x01, 0x00, 0x18, 0x99, 0x59, 0x66, 0x00, 0x61, 0x37, 0x05, 0x88, 0x49,
        ],
        [
            0x01, 0x00, 0x18, 0x99, 0x59, 0x67, 0x00, 0x61, 0x37, 0x05, 0x22, 0x18,
        ],
        [
            0x01, 0x00, 0x18, 0x99, 0x59, 0x68, 0x00, 0x61, 0x37, 0x05, 0x47, 0xe1,
        ],
        [
            0x01, 0x00, 0x19, 0x99, 0x59, 0x69, 0x00, 0x63, 0x34, 0x22, 0xc5, 0xd5,
        ],
        [
            0x01, 0x00, 0x19, 0x99, 0x59, 0x70, 0x00, 0x63, 0x34, 0x22, 0x69, 0xf3,
        ],
        [
            0x01, 0x00, 0x19, 0x99, 0x59, 0x71, 0x00, 0x63, 0x34, 0x22, 0xc3, 0xa2,
        ],
        [
            0x01, 0x00, 0x20, 0x99, 0x59, 0x72, 0x00, 0x66, 0x42, 0x49, 0xa6, 0x67,
        ],
        [
            0x01, 0x00, 0x20, 0x99, 0x59, 0x73, 0x00, 0x66, 0x42, 0x49, 0x0c, 0x36,
        ],
        [
            0x01, 0x00, 0x20, 0x99, 0x59, 0x74, 0x00, 0x66, 0x42, 0x49, 0x6b, 0xe2,
        ],
    ];

    let mut p = DiscPosition::ZERO - Msf::from_sector_index(expected.len() as u32).unwrap();

    for exp in expected.iter() {
        let msf = match p {
            DiscPosition::LeadIn(msf) => msf,
            _ => panic!(),
        };

        let s = toc.build_toc_sector(msf).unwrap();

        let raw = s.q().to_raw();

        print!("{} [", p);
        for &b in raw.iter() {
            print!("0x{:02x},", b);
        }
        println!("],");

        // Make sure that we convert back to the same thing
        let q = Q::from_raw(raw).unwrap();
        assert_eq!(q, s.q().clone());

        assert_eq!(raw, *exp);
        p = p.next().unwrap();
    }
}
